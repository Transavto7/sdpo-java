{"version":3,"file":"js/602.86beb14e.js","mappings":"4uMAgGOA,MAAM,yB,upBAkBJA,MAAM,gB,0CAlBbC,EAAAA,EAAAA,IAsBM,MAtBNC,EAsBM,CArBJC,GAiBAC,EAAAA,EAAAA,GAGM,MAHNC,EAGM,EAFJD,EAAAA,EAAAA,GAAmE,UAA1DE,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEC,EAAAC,YAAYV,MAAM,oBAAmB,UACrDI,EAAAA,EAAAA,GAAqF,UAA5EE,QAAKC,EAAA,KAAAA,EAAA,GAAAC,GAAEG,EAAAC,QAAQC,KAAK,CAADC,KAAA,gBAA0Bd,MAAM,OAAM,iB,eA7GxE,GACEe,OACE,MAAO,CACLC,SAAU,KACVC,QAAS,EACTC,WAAW,EACXC,WAAW,EACXC,gBAAiB,GACjBC,WAAY,OACZC,UAAW,MACXC,WAAW,EAEf,EACAC,QAAS,CACPC,UACEC,KAAKC,WAAa,IAAIC,UAAU,+CAChCF,KAAKC,WAAWE,UAAYC,UAC1BJ,KAAKL,WAAaK,KAAKJ,UACvBI,KAAKJ,UAAYS,EAAMhB,IAAI,EAG7BW,KAAKC,WAAWK,OAAUD,IACxBE,QAAQC,IAAI,yDAAyD,EAGvER,KAAKC,WAAWQ,MAASA,IACvBF,QAAQC,IAAIC,EAAM,CAEtB,EACAL,mBACEG,QAAQC,IAAI,oCACNE,EAAAA,EAAAA,KACR,EACAC,WACEX,KAAKd,QAAQC,KAAK,CAACC,KAAM,cAC3B,EACAgB,iBACEJ,KAAKd,QAAQC,KAAK,CAACC,KAAM,oBAC3B,EACAwB,UAAUC,GACR,aAAoBC,IAAXD,GAAmC,OAAXA,GAA8B,SAAXA,EACtD,EACAE,eACEf,KAAKT,QAAU,EACfS,KAAKgB,cAAgBC,aAAY,KAC/BjB,KAAKT,UACDS,KAAKT,QAAU,GACjB2B,cAAclB,KAAKgB,cACrB,GACC,IACL,GAEFZ,sBACQe,EAAAA,EAAAA,YACAC,EAAAA,EAAAA,MACNpB,KAAKD,UACLC,KAAKe,eAELf,KAAKqB,gBAAkBJ,aAAYb,UACjC,MAAMS,QAAeS,EAAAA,EAAAA,MAEhBtB,KAAKY,UAAUC,KAIpBb,KAAKuB,WAAWC,iBAAmBC,OAAOZ,IAAW,EACrDb,KAAKuB,WAAWG,eAAiB,IACjC1B,KAAKW,WAAU,GACd,IACL,EACAgB,YACE3B,KAAK4B,aACLV,cAAclB,KAAKqB,iBACnBH,cAAclB,KAAKgB,cACrB,EACAa,SAAU,CACRN,aACE,OAAOvB,KAAK8B,OAAOC,MAAMR,UAC3B,EACAS,aACE,OAAOhC,KAAK8B,OAAOC,MAAMR,WAAWU,WAAajC,KAAK8B,OAAOC,MAAMR,WAAWW,SAChF,EACAC,SACE,OAAOnC,KAAK8B,OAAOC,MAAMK,QAAQD,QAAU,CAAC,CAC9C,I,QCtFJ,MAAME,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://sdpo-frontend/./src/pages/inspection/Step-alcometer.vue","webpack://sdpo-frontend/./src/pages/inspection/Step-alcometer.vue?12cd"],"sourcesContent":["<script>\nimport {\n  closeAlcometer, closeAlcometrSocket,\n  enableSlowModeAlcometer,\n  getAlcometerResult\n} from '@/helpers/alcometer';\n\nexport default {\n  data() {\n    return {\n      interval: null,\n      seconds: 5,\n      needRetry: false,\n      showRetry: false,\n      statusAlcometer: \"\",\n      statusPrev: \"prev\",\n      statusNow: \"now\",\n      recording: false\n    }\n  },\n  methods: {\n    connect() {\n      this.connection = new WebSocket(\"ws://localhost:8080/device/alcometer/status\")\n      this.connection.onmessage = async (event) => {\n        this.statusPrev = this.statusNow;\n        this.statusNow = event.data;\n      }\n\n      this.connection.onopen = (event) => {\n        console.log(\"Successfully connected to the echo websocket server...\")\n      }\n\n      this.connection.error = (error) => {\n        console.log(error);\n      }\n    },\n    async disconnect() {\n      console.log('Disconnect websoket server');\n      await closeAlcometrSocket();\n    },\n    nextStep() {\n      this.$router.push({name: 'step-sleep'});\n    },\n    async prevStep() {\n      this.$router.push({name: 'step-thermometer'});\n    },\n    hasResult(result) {\n      return !(result === undefined || result === null || result === 'next');\n    },\n    runCountdown() {\n      this.seconds = 5;\n      this.timerInterval = setInterval(() => {\n        this.seconds--;\n        if (this.seconds < 1) {\n          clearInterval(this.timerInterval);\n        }\n      }, 1000);\n    },\n  },\n  async mounted() {\n    await enableSlowModeAlcometer();\n    await closeAlcometer();\n    this.connect()\n    this.runCountdown()\n\n    this.requestInterval = setInterval(async () => {\n      const result = await getAlcometerResult();\n\n      if (!this.hasResult(result)) {\n        return;\n      }\n\n      this.inspection.alcometer_result = Number(result) || 0;\n      this.inspection.alcometer_mode = '1';\n      this.nextStep();\n    }, 700);\n  },\n  unmounted() {\n    this.disconnect()\n    clearInterval(this.requestInterval);\n    clearInterval(this.timerInterval);\n  },\n  computed: {\n    inspection() {\n      return this.$store.state.inspection;\n    },\n    identifier() {\n      return this.$store.state.inspection.driver_id || this.$store.state.inspection.person_id;\n    },\n    system() {\n      return this.$store.state.config?.system || {};\n    },\n  },\n}\n</script>\n<template>\n  <div class=\"step-alcometer__outer\">\n    <div class=\"step-alcometer\">\n      <h3 class=\"animate__animated animate__fadeInDown\">Количественное определение алкоголя</h3>\n      <div class=\"step-alcometer__items\">\n        <div class=\"step-alcometer__item animate__animated animate__fadeInUp d-1\">\n          <span style=\"min-height: 30px\">3</span>\n          <img style=\"padding-right: 20px\" width=\"80\" src=\"@/assets/images/precise.png\">\n          Установите мундштук\n        </div>\n        <div class=\"step-alcometer__text  animate__animated animate__fadeInUp d-2\">\n          Установите индивидуальный мундштук<br><br>\n          Дождитесь ГОТОВ на экране алкометра<br><br>\n          Начните дуть с умеренной силой до<br>\n          окончания звукового сигнала.<br><br>\n          Снимите индивидуальный мундштук<br><br>\n        </div>\n      </div>\n    </div>\n    <div class=\"step-buttons\">\n      <button @click=\"prevStep()\" class=\"btn opacity blue\">Назад</button>\n      <button @click=\"$router.push({ name: 'step-sleep' })\" class=\"btn\">Продолжить</button>\n    </div>\n  </div>\n</template>\n","import { render } from \"./Step-alcometer.vue?vue&type=template&id=54a7f788\"\nimport script from \"./Step-alcometer.vue?vue&type=script&lang=js\"\nexport * from \"./Step-alcometer.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/Users/baarme/develop/java/sdpo-java/src/main/frontend/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_hoisted_1","_hoisted_2","_createElementVNode","_hoisted_3","onClick","_cache","$event","$options","prevStep","_ctx","$router","push","name","data","interval","seconds","needRetry","showRetry","statusAlcometer","statusPrev","statusNow","recording","methods","connect","this","connection","WebSocket","onmessage","async","event","onopen","console","log","error","closeAlcometrSocket","nextStep","hasResult","result","undefined","runCountdown","timerInterval","setInterval","clearInterval","enableSlowModeAlcometer","closeAlcometer","requestInterval","getAlcometerResult","inspection","alcometer_result","Number","alcometer_mode","unmounted","disconnect","computed","$store","state","identifier","driver_id","person_id","system","config","__exports__","render"],"sourceRoot":""}